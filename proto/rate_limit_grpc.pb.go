// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.0
// source: proto/rate_limit.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	RateLimitService_ListRateLimit_FullMethodName           = "/config.RateLimitService/ListRateLimit"
	RateLimitService_SaveRateLimitDescriptor_FullMethodName = "/config.RateLimitService/SaveRateLimitDescriptor"
)

// RateLimitServiceClient is the client API for RateLimitService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RateLimitServiceClient interface {
	ListRateLimit(ctx context.Context, in *ListRateLimitRequest, opts ...grpc.CallOption) (*ListRateLimitResponse, error)
	SaveRateLimitDescriptor(ctx context.Context, in *SaveDescriptorRequest, opts ...grpc.CallOption) (*SaveDescriptorResponse, error)
}

type rateLimitServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRateLimitServiceClient(cc grpc.ClientConnInterface) RateLimitServiceClient {
	return &rateLimitServiceClient{cc}
}

func (c *rateLimitServiceClient) ListRateLimit(ctx context.Context, in *ListRateLimitRequest, opts ...grpc.CallOption) (*ListRateLimitResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListRateLimitResponse)
	err := c.cc.Invoke(ctx, RateLimitService_ListRateLimit_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rateLimitServiceClient) SaveRateLimitDescriptor(ctx context.Context, in *SaveDescriptorRequest, opts ...grpc.CallOption) (*SaveDescriptorResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SaveDescriptorResponse)
	err := c.cc.Invoke(ctx, RateLimitService_SaveRateLimitDescriptor_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RateLimitServiceServer is the server API for RateLimitService service.
// All implementations must embed UnimplementedRateLimitServiceServer
// for forward compatibility
type RateLimitServiceServer interface {
	ListRateLimit(context.Context, *ListRateLimitRequest) (*ListRateLimitResponse, error)
	SaveRateLimitDescriptor(context.Context, *SaveDescriptorRequest) (*SaveDescriptorResponse, error)
	mustEmbedUnimplementedRateLimitServiceServer()
}

// UnimplementedRateLimitServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRateLimitServiceServer struct {
}

func (UnimplementedRateLimitServiceServer) ListRateLimit(context.Context, *ListRateLimitRequest) (*ListRateLimitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRateLimit not implemented")
}
func (UnimplementedRateLimitServiceServer) SaveRateLimitDescriptor(context.Context, *SaveDescriptorRequest) (*SaveDescriptorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveRateLimitDescriptor not implemented")
}
func (UnimplementedRateLimitServiceServer) mustEmbedUnimplementedRateLimitServiceServer() {}

// UnsafeRateLimitServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RateLimitServiceServer will
// result in compilation errors.
type UnsafeRateLimitServiceServer interface {
	mustEmbedUnimplementedRateLimitServiceServer()
}

func RegisterRateLimitServiceServer(s grpc.ServiceRegistrar, srv RateLimitServiceServer) {
	s.RegisterService(&RateLimitService_ServiceDesc, srv)
}

func _RateLimitService_ListRateLimit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRateLimitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RateLimitServiceServer).ListRateLimit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RateLimitService_ListRateLimit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RateLimitServiceServer).ListRateLimit(ctx, req.(*ListRateLimitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RateLimitService_SaveRateLimitDescriptor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveDescriptorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RateLimitServiceServer).SaveRateLimitDescriptor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RateLimitService_SaveRateLimitDescriptor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RateLimitServiceServer).SaveRateLimitDescriptor(ctx, req.(*SaveDescriptorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RateLimitService_ServiceDesc is the grpc.ServiceDesc for RateLimitService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RateLimitService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "config.RateLimitService",
	HandlerType: (*RateLimitServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListRateLimit",
			Handler:    _RateLimitService_ListRateLimit_Handler,
		},
		{
			MethodName: "SaveRateLimitDescriptor",
			Handler:    _RateLimitService_SaveRateLimitDescriptor_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/rate_limit.proto",
}
